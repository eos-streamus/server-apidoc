openapi: 3.0.1
info:
  description: "Streamus server REST Api"
  version: "1.0.0"
  title: "Streamus"
  contact:
    email: "henrik.akesson@outlook.com"
  license:
    name: "Apache 2.0"
    url: "http://www.apache.org/licenses/LICENSE-2.0.html"

paths:
  /artists:
    get:
      tags:
      - artists
      summary: Get all artists
      operationId: getAllArtists
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Artist'
              example:
                - id: 136
                  name: Pink Floyd
                  albums:
                  - 118
                  members:
                    - id: 182
                      albums: []
                      firstName: Syd
                      lastName: Barrett
                      dateOfBirth: -756954000000
                      createdAt: 1591605887479
                      updatedAt: 1591605887479
                      from: -157770000000
                      to: -31626000000
                    - id: 185
                      albums: []
                      firstName: Roger
                      lastName: Waters
                      dateOfBirth: -830656800000
                      createdAt: 1591605887488
                      updatedAt: 1591605887488
                - id: 185
                  albums: []
                  firstName: Roger
                  lastName: Waters
                  dateOfBirth: -830656800000
                  createdAt: 1591605887488
                  updatedAt: 1591605887488
                  from: '1968-01-01'
                  to: null
                - id: 182
                  albums: []
                  firstName: Syd
                  lastName: Barrett
                  dateOfBirth: -756954000000
                  createdAt: 1591605887479
                  updatedAt: 1591605887479
                  from: -157770000000
                  to: -31626000000
  /artist/{id}:
    get:
      tags:
        - artists
      summary: Find artist by id
      operationId: getArtistById
      parameters: 
        - name: id
          in: path
          description: Id of requested artist
          required: true
          schema:
            type: integer
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Artist'
              example: 
                id: 1230
                name: Parasite
                duration: 132
        404:
          description: Film not found
          content: {}
    
  /band:
    post:
      tags:
        - bands
      summary:
        Create a new Band
      operationId: createBand
      requestBody:
        description: Data of band to create
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
      responses:
        200:
          description: Operation successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Band'
              example:
                id: 1230
                name: "Emperor"
        400:
          description: Operation failed
  /musician:
    post:
      tags:
        - musicians
      summary: Create a new musician
      operationId: createMusician
      requestBody:
        description: 
          Data of Musician to create.
          If name is not defined, either person.id should be a valid person id or
          person.firstName and person.lastName should be valid.
        content:
          application/json:
            schema:
              type: object
              properties:
                person:
                  type: object
                  properties:
                    id:
                      type: integer
                    firstName:
                      type: string
                    lastName:
                      type: string
                    dateOfBirth:
                      type: integer
                name:
                  type: string
      responses:
        200:
          description: Operation successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Musician'
              example:
                id: 1230
                name: "Test"
        400:
          description: Operation failed
  /band/{id}/members:
    post:
      tags:
        - bands
      summary: Add a member to a band
      operationId: addMember
      parameters: 
        - name: id
          in: path
          description: Id of band
          required: true
          schema:
            type: integer
      requestBody:
        description: Data of musician to add. Either a musician id, an object containing a person with an id, or a musician.
        content:
          application/json:
            schema:
              oneOf:
                - $ref: '#/components/schemas/Musician'
                - type: object
                  properties:
                    person:
                      oneOf:
                        - $ref: '#/components/schemas/Person'
                        - type: object
                          properties:
                            id: 
                              type: integer
                - properties:
                    musicianId:
                      type: integer
              properties:
                from:
                  type: string
                to:
                  type: string
              example: 
                musicianId: 142
                from: '2000-01-01'
                to: '2010-01-01'
      responses:
        200:
          description: Operation successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Band'
        400:
          description: Operation unsuccessful. Usually due to overlapping memberships of a musician to the same band.
        
  # FILMS
  /film/{id}:
    get:
      tags:
        - films
      summary: Find film by id
      operationId: getFilmById
      parameters: 
        - name: id
          in: path
          description: Id of requested film
          required: true
          schema:
            type: integer
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Film'
              example: 
                id: 1230
                name: Parasite
                duration: 132
        404:
          description: Film not found
          content: {}
  /film/{id}/stream:
    get:
      tags:
        - films
      summary: Get a stream for a film
      operationId: streamFilm
      parameters: 
        - name: id
          in: path
          description: Id of requested film
          required: true
          schema:
            type: integer
      responses:
        200:
          description: successful operation
          content:
            video/mp4:
              schema:
                type: string
                format: binary
  /films:
    get:
      tags:
      - films
      summary: Get all films
      operationId: getAllFilms
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Film'
              example:
                - id: 1230
                  name: Parasite
                  duration: 132
    post:
      tags:
        - films
      summary: "Add a new film"
      operationId: "addFilm"
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                name:
                  type: string
                file:
                  type: string
                  format: binary
      responses:
        200:
          description: upload successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: integer
                  name:
                    type: string
                  duration:
                    type: integer
        400:
          description: Upload unsuccessful
          content:
            application/json:
              schema:
                type: object
                properties:
                  reason:
                    type: string
components:
  schemas:
    Film:
      type: "object"
      properties:
        id:
          type: "integer"
        name:
          type: "string"
        duration:
          type: "integer"
    Track:
      type: "object"
      properties:
        id:
          type: "integer"
        name:
          type: "string"
        duration:
          type: "integer"
        trackNumber:
          type: "integer"
    Album:
      type: "object"
      properties:
        id:
          type: "integer"
        name:
          type: "string"
        createdAt:
          type: "integer"
        updatedAt:
          type: "integer"
        tracks:
          type: "array"
          items:
            $ref: '#/components/schemas/Track'
    Person:
      type: "object"
      properties:
        firstName:
          type: "string"
        lastName:
          type: "string"
        dateOfBirth: 
          type: "integer"
        createdAt:
          type: "integer"
        updatedAt:
          type: "integer"
    Musician:
      allOf:
        - $ref: '#/components/schemas/Person'
        - type: "object"
          properties:
            id:
              type: integer
            name: 
              type: "string"
      properties:
        albums:
          type: "array"
          items:
            type: integer
    Band:
      type: "object"
      properties:
        id:
          type: "integer"
        name:
          type: "string"
        members:
          type: "array"
          items:
            type: object
            $ref: '#/components/schemas/Member'
        albums:
          type: "array"
          items:
            type: integer
    Member:
      allOf:
        - $ref: '#/components/schemas/Musician'
        - type: "object"
          properties:
            from: 
              type: string
            to: 
              type: string
    Artist:
      anyOf:
        - $ref: '#/components/schemas/Band'
        - $ref: '#/components/schemas/Musician'